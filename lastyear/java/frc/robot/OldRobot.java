// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Robot.

package frc.robot;

import edu.wpi.first.hal.FRCNetComm.tInstances;
import edu.wpi.first.hal.FRCNetComm.tResourceType;
import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;


import edu.wpi.first.hal.HAL;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PneumaticHub;
import edu.wpi.first.wpilibj.PneumaticsBase;
import edu.wpi.first.wpilibj.PneumaticsControlModule;
import edu.wpi.first.wpilibj.PneumaticsModuleType;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.motorcontrol.MotorController;
import edu.wpi.first.wpilibj.motorcontrol.PWMMotorController;
import edu.wpi.first.wpilibj.motorcontrol.Spark;

import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj.motorcontrol.Spark;
import com.revrobotics.RelativeEncoder;
import com.revrobotics.SparkMaxAlternateEncoder;
import com.revrobotics.SparkMaxPIDController;
import com.revrobotics.AlternateEncoderType;
import com.revrobotics.CANSparkMax;
import com.revrobotics.SparkMaxRelativeEncoder;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;



import frc.robot.vision.MyVisionThread;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in
 * the project.
 */
public class OldRobot extends TimedRobot {


    private Encoder encoder_left;
    private Encoder encoder_right;
    private Thread m_visionThread;
    private NetworkTableEntry m_maxSpeed;
    private CANSparkMax sparkMax;
    private CANSparkMax sparkMaxToo;
    //private ArrayList <Spark> pwms = new ArrayList<Spark>();
    private Joystick joystick;
    long lastTime = System.nanoTime();
    long thisTime = System.nanoTime();
    double thisPosition = 0;
    double lastPosition = 0;
    int thisCount = 0;
    int lastCount = 0;
    int maxRPM = 0;
    int minRPM = 0;
    double motorSpeed  = 0;
    // private PneumaticsControlModule pnu;
    // private DoubleSolenoid arm;





    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        // Instantiate our RobotContainer. This will perform all our button bindings,
        // and put our
        // autonomous chooser on the dashboard.
        HAL.report(tResourceType.kResourceType_Framework, tInstances.kFramework_RobotBuilder);
        //m_visionThread = new MyVisionThread();
        //m_visionThread.setDaemon(true);
        //m_visionThread.start();
        encoder_left = new Encoder(0,1);
        encoder_right = new Encoder(2,3);
        lastCount = encoder_left.get();
        thisCount = lastCount;
        sparkMax = new CANSparkMax(1, MotorType.kBrushless);
        sparkMaxToo = new CANSparkMax(2, MotorType.kBrushed);


        //pnu = new PneumaticsControlModule();
        //arm = new DoubleSolenoid(PneumaticsModuleType.CTREPCM, 0, 1);

        
        sparkMax.set(0);
        sparkMax.setOpenLoopRampRate(2);
        /*pwms.add(0,null);
        for (int i=1;i<10;i++) {
            pwms.add(i,new Spark(i));
            pwms.get(i).set(0);
        }*/
        joystick = new Joystick(0);
        
        Shuffleboard.getTab("Configuration")
            .add("Max Speed", 0.1)
             .withWidget("Number Slider")
            .withPosition(1, 1)
            .withSize(2, 1)
            .getEntry();
    }

    
    /**
     * This function is called every robot packet, no matter the mode. Use this for
     * items like
     * diagnostics that you want ran during disabled, autonomous, teleoperated and
     * test.
     *
     * <p>
     * This runs after the mode specific periodic functions, but before
     * LiveWindow and SmartDashboard integrated updating.
     */
    @Override
    public void robotPeriodic() {
        
        // Runs the Scheduler. This is responsible for polling buttons, adding
        // newly-scheduled
        // commands, running already-scheduled commands, removing finished or
        // interrupted commands,
        // and running subsystem periodic() methods. This must be called from the
        // robot's periodic
        // block in order for anything in the Command-based framework to work.
        RelativeEncoder enc;

        lastTime = thisTime;
        thisTime = System.nanoTime();
        long nanoseconds = thisTime - lastTime;

        //lastCount = thisCount;
        //thisCount =  encoder_left.get();
        //long countDifference = thisCount - lastCount;
        //int rpm =(int) ( (double) countDifference * 60000000000.0 / (double) nanoseconds );
        lastPosition = thisPosition;
        enc = sparkMax.getEncoder();
        thisPosition =  enc.getPosition();
        int rpm = (int)  ( ( thisPosition - lastPosition) * 60000000000.0 / (double) nanoseconds);
        SmartDashboard.putNumber("position", thisPosition);
        SmartDashboard.putNumber("rpm", rpm);
        SmartDashboard.putNumber("velocity", enc.getVelocity());
        if (rpm > maxRPM ) { maxRPM = rpm;} 
        if (rpm < minRPM ) { minRPM = rpm;} 


        enc = sparkMaxToo.getEncoder(SparkMaxRelativeEncoder.Type.kQuadrature, 8128);
        SmartDashboard.putNumber("velocity too" , enc.getVelocity());


        NetworkTable table = NetworkTableInstance.getDefault().getTable("limelight");
        NetworkTableEntry tx = table.getEntry("tx");
        NetworkTableEntry ty = table.getEntry("ty");
        NetworkTableEntry ta = table.getEntry("ta");

        SmartDashboard.putNumber("sparkEncoder",enc.getPosition()) ;
        SmartDashboard.putNumber("speedz",sparkMax.get());
        SmartDashboard.putNumber("max rpm", maxRPM);
        SmartDashboard.putNumber("min rpm", minRPM);
        SmartDashboard.putNumber("tx", tx.getDouble(0));
        SmartDashboard.putNumber("Distance", 3/Math.sqrt(ta.getDouble(0)) );

        SmartDashboard.putNumber("ty", ty.getDouble(0));
        SmartDashboard.putNumber("tz", ta.getDouble(0));

        SmartDashboard.putNumber("left",encoder_left.get());
        SmartDashboard.putNumber("right", encoder_right.get());
        SmartDashboard.putNumber("left x", joystick.getX());
        SmartDashboard.putNumber("motorSpeed", motorSpeed);
        SmartDashboard.putNumber("pov", joystick.getPOV());
      //  SmartDashboard.putNumber("compressor current", pnu.getCompressorCurrent());
      //  SmartDashboard.putNumber("compressor voltage", pnu.getAnalogVoltage(1));

        SmartDashboard.updateValues();
    }

    /**
     * This function is called once each time the robot enters Disabled mode.
     */
    @Override
    public void disabledInit() {
        //pnu.disableCompressor();

    }

    @Override
    public void disabledPeriodic() {
    }

    /**
     * This autonomous runs the autonomous command selected by your
     * {@link RobotContainer} class.
     */
    @Override
    public void autonomousInit() {
 
    }

    /**
     * This function is called periodically during autonomous.
     */
    @Override
    public void autonomousPeriodic() {
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
       // pnu.enableCompressorDigital();
    }

    /**
     * This function is called periodically during operator control.
     */
    @Override
    public void teleopPeriodic() {

        if (joystick.getRawButtonPressed(2) ) {
            motorSpeed = motorSpeed+0.02;
        } else if (joystick.getRawButtonPressed(1)) {
            motorSpeed = motorSpeed -0.02;
        } else if (joystick.getRawButtonPressed(4)) {
            motorSpeed = motorSpeed+0.2;
        } else if (joystick.getRawButtonPressed(3)) {
            motorSpeed = motorSpeed-0.2;
        } else if (joystick.getPOV() > -1)  {
            motorSpeed = 0;
        }

        if (motorSpeed > 1) {
            motorSpeed = 1;
        } else if (motorSpeed < -1) {
            motorSpeed = -1;
        }
        if (joystick.getRawButton(6)) {
            SmartDashboard.putNumber("Buttong 5" , 0);
            //arm.set(Value.kForward);
        } else {
            //arm.set(Value.kReverse);
            SmartDashboard.putNumber("Buttong 5" , 1);
        }
        sparkMax.set(motorSpeed);
        sparkMaxToo.set(motorSpeed);

    }

    @Override
    public void testInit() {
        // Cancels all running commands at the start of test mode.
    }

    /**
     * This function is called periodically during test mode.
     */
    @Override
    public void testPeriodic() {
    }

}